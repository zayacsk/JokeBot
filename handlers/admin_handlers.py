import logging
from telebot import types
from firebase import (
    initialize_firebase,
    get_approved_jokes_count,
    get_total_jokes_count,
    find_joke_by_id,
    get_unapproved_joke,
    approve_joke,
    delete_joke,
    find_joke_by_key
)
from keyboards import create_admin_keyboard, create_cancel_keyboard, create_moderation_reply_keyboard
from states import set_user_state, get_user_state, delete_user_state
from utils import is_admin, log_message
import config
from async_utils import run_async

logger = logging.getLogger(__name__)

def setup_admin_handlers(bot):
    @bot.message_handler(func=lambda m: m.text == 'üóë –£–¥–∞–ª–∏—Ç—å –ø–æ ID' and 
                                        is_admin(m.from_user.id) and 
                                        m.chat.type == 'private')
    def admin_delete_start(message):
        log_message(logger, message)
        run_async(process_admin_delete_start(bot, message))

    @bot.message_handler(func=lambda m: get_user_state(m.from_user.id) and 
                                        get_user_state(m.from_user.id).get('state') == 'admin_deleting' and 
                                        m.chat.type == 'private')
    def admin_delete_joke(message):
        log_message(logger, message)
        run_async(process_admin_delete_joke(bot, message))

    @bot.message_handler(func=lambda m: m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and 
                                        is_admin(m.from_user.id) and 
                                        m.chat.type == 'private')
    def show_stats(message):
        log_message(logger, message)
        run_async(process_show_stats(bot, message))
        
    @bot.message_handler(func=lambda m: m.text == 'üëÆ –ú–æ–¥–µ—Ä–∞—Ü–∏—è' and 
                                        is_admin(m.from_user.id) and 
                                        m.chat.type == 'private')
    def moderation_start(message):
        log_message(logger, message)
        run_async(process_moderation_start(bot, message))

    @bot.message_handler(func=lambda m: get_user_state(m.from_user.id) and 
                                        get_user_state(m.from_user.id).get('state') == 'moderation' and 
                                        m.chat.type == 'private')
    def handle_moderation_action(message):
        log_message(logger, message)
        run_async(process_moderation_action(bot, message))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def process_admin_delete_start(bot, message):
    try:
        user_id = message.from_user.id
        set_user_state(user_id, {'state': 'admin_deleting'})
        bot.send_message(
            message.chat.id,
            "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –∞–Ω–µ–∫–¥–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=create_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in admin_delete_start: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")

async def process_admin_delete_joke(bot, message):
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            bot.send_message(
                message.chat.id, 
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                reply_markup=create_admin_keyboard()
            )
            delete_user_state(user_id)
            return
        
        try:
            joke_id = int(text)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        
        root_ref = initialize_firebase()
        key, joke = await find_joke_by_id(root_ref, joke_id)
        if not joke:
            bot.send_message(message.chat.id, "üîç –ê–Ω–µ–∫–¥–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é delete_joke –≤–º–µ—Å—Ç–æ fb_delete_joke
            await delete_joke(root_ref, key)
            logger.info(f"Admin {user_id} deleted joke {joke_id} (key: {key})")
        except Exception as e:
            logger.error(f"Admin delete error: {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
            return
        
        delete_user_state(user_id)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ê–Ω–µ–∫–¥–æ—Ç #{joke_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=create_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in admin_delete_joke: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞")

async def process_show_stats(bot, message):
    try:
        root_ref = initialize_firebase()
        approved_count = await get_approved_jokes_count(root_ref)
        total_count = await get_total_jokes_count(root_ref)
        last_id = root_ref.child('approved_counter').get() or 0

        bot.send_message(
            message.chat.id,
            f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: *{approved_count}*\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π ID –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ: *{last_id}*",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in show_stats: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def process_moderation_start(bot, message):
    try:
        user_id = message.from_user.id
        root_ref = initialize_firebase()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç
        key, joke = await get_unapproved_joke(root_ref)
        
        if not joke:
            bot.send_message(
                message.chat.id,
                "üéâ –í—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=create_admin_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        set_user_state(user_id, {
            'state': 'moderation',
            'current_joke_key': key,
            'joke_id': joke.get('joke_id', 'N/A')
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        bot.send_message(
            message.chat.id,
            f"üìú *–ù–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (ID –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è):*\n\n"
            f"{joke['text']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=create_moderation_reply_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in moderation_start: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

async def process_moderation_action(bot, message):
    try:
        user_id = message.from_user.id
        user_state = get_user_state(user_id)
        
        if not user_state or user_state.get('state') != 'moderation':
            bot.send_message(
                message.chat.id, 
                "‚ùå –°–µ—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞",
                reply_markup=create_admin_keyboard()
            )
            return
        
        action = message.text
        root_ref = initialize_firebase()
        joke_key = user_state['current_joke_key']
        
        if action == "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å":
            if await approve_joke(root_ref, joke_key):
                joke = await find_joke_by_key(root_ref, joke_key)
                response = f"‚úÖ –ê–Ω–µ–∫–¥–æ—Ç #{joke['joke_id']} –æ–¥–æ–±—Ä–µ–Ω!"
            else:
                response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞"
                
        elif action == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å":
            if await delete_joke(root_ref, joke_key):
                response = f"‚ùå –ê–Ω–µ–∫–¥–æ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω!"
            else:
                response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞"
                
        elif action == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π":
            response = f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–Ω–µ–∫–¥–æ—Ç—É"
            
        elif action == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å":
            delete_user_state(user_id)
            bot.send_message(
                message.chat.id,
                "üö´ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                reply_markup=create_admin_keyboard()
            )
            return
        else:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        next_key, next_joke = await get_unapproved_joke(root_ref)
        
        if next_joke:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
            set_user_state(user_id, {
                'state': 'moderation',
                'current_joke_key': next_key,
                'joke_id': next_joke.get('joke_id', 'N/A')
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç
            bot.send_message(
                message.chat.id,
                f"{response}\n\n"
                f"üìú *–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:*\n\n"
                f"{next_joke['text']}",
                parse_mode='Markdown',
                reply_markup=create_moderation_reply_keyboard()
            )
        else:
            # –ù–µ—Ç –±–æ–ª—å—à–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            delete_user_state(user_id)
            bot.send_message(
                message.chat.id,
                f"{response}\n\nüéâ –í—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
                reply_markup=create_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in moderation_action: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=create_admin_keyboard()
        )