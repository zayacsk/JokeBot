import re
import logging
from telebot import types
import config
from firebase import initialize_firebase, get_random_joke, subscribe_group, unsubscribe_group
from keyboards import create_group_keyboard
from utils import log_message, is_group_admin, last_joke_cache
from async_utils import run_async

logger = logging.getLogger(__name__)

def setup_group_handlers(bot):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    def extract_command(text):
        if not text:
            return ""
        text = text.strip().lower()
        text = re.sub(r'[^\w\s/@]', '', text)
        parts = re.split(r'[@\s]', text)
        command = parts[0] if parts else ""
        
        if command.startswith('/'):
            command = command[1:]
        
        return command
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
    def normalize_command(cmd):
        cmd = cmd.lower().replace("_", "").replace(" ", "")
        aliases = {
            "subscribegroup": "subscribe_group",
            "unsubscribegroup": "unsubscribe_group",
            "joke": "joke",
            "help": "help",
            "—Å–ª—É—á–∞–π–Ω—ã–π–∞–Ω–µ–∫–¥–æ—Ç": "joke",
            "–ø–æ–¥–ø–∏—Å–∞—Ç—å–≥—Ä—É–ø–ø—É": "subscribe_group",
            "–æ—Ç–ø–∏—Å–∞—Ç—å–≥—Ä—É–ø–ø—É": "unsubscribe_group",
            "–ø–æ–º–æ—â—å": "help"
        }
        return aliases.get(cmd, cmd)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø
    @bot.message_handler(
        func=lambda m: m.chat.type in ['group', 'supergroup'] and 
        m.text in ["üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç", "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É", "üîï –û—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    )
    def handle_group_buttons(message):
        log_message(logger, message)
        text = message.text
        
        if text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç":
            run_async(process_manual_joke_request(bot, message))
        elif text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É":
            run_async(process_subscribe_group(bot, message))
        elif text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É":
            run_async(process_unsubscribe_group(bot, message))
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            run_async(process_send_group_help(bot, message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (—Ç—Ä–∏–≥–≥–µ—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
    @bot.message_handler(
        func=lambda m: m.chat.type in ['group', 'supergroup'] and 
        any(word in (m.text or '').lower() for word in config.GROUP_TRIGGER_WORDS)
    )
    def group_trigger(message):
        log_message(logger, message)
        run_async(process_group_trigger(bot, message))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø
    @bot.message_handler(
        func=lambda m: m.chat.type in ['group', 'supergroup'] and 
        extract_command(m.text) in ['subscribe_group', 'unsubscribe_group', 'joke', 'help',
                                    'subscribegroup', 'unsubscribegroup',
                                    '—Å–ª—É—á–∞–π–Ω—ã–π–∞–Ω–µ–∫–¥–æ—Ç', '–ø–æ–¥–ø–∏—Å–∞—Ç—å–≥—Ä—É–ø–ø—É', '–æ—Ç–ø–∏—Å–∞—Ç—å–≥—Ä—É–ø–ø—É', '–ø–æ–º–æ—â—å']
    )
    def handle_group_commands(message):
        log_message(logger, message)
        cmd = extract_command(message.text)
        normalized_cmd = normalize_command(cmd)
        
        if normalized_cmd == "subscribe_group":
            run_async(process_subscribe_group(bot, message))
        elif normalized_cmd == "unsubscribe_group":
            run_async(process_unsubscribe_group(bot, message))
        elif normalized_cmd == "joke":
            run_async(process_manual_joke_request(bot, message))
        elif normalized_cmd == "help":
            run_async(process_send_group_help(bot, message))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def process_group_trigger(bot, message):
    try:
        chat_id = message.chat.id
        root_ref = initialize_firebase()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —à—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        last_joke_id = last_joke_cache.get(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é
        joke = await get_random_joke(root_ref, exclude_joke_id=last_joke_id)
        
        if not joke:
            bot.reply_to(message, "üò¢ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        last_joke_cache[chat_id] = joke['joke_id']
        
        bot.reply_to(
            message,
            f"üìú *–ê–Ω–µ–∫–¥–æ—Ç #{joke['joke_id']}*\n\n{joke['text']}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in group_trigger: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞")

async def process_manual_joke_request(bot, message):
    try:
        chat_id = message.chat.id
        root_ref = initialize_firebase()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —à—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        last_joke_id = last_joke_cache.get(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é
        joke = await get_random_joke(root_ref, exclude_joke_id=last_joke_id)
        
        if not joke:
            bot.reply_to(message, "üò¢ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        last_joke_cache[chat_id] = joke['joke_id']
        
        bot.reply_to(
            message,
            f"üìú *–ê–Ω–µ–∫–¥–æ—Ç #{joke['joke_id']}*\n\n{joke['text']}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in manual_joke_request: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞")

async def process_subscribe_group(bot, message):
    try:
        if not is_group_admin(bot, message.chat, message.from_user.id):
            bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ –∞–Ω–µ–∫–¥–æ—Ç—ã.")
            return
        
        root_ref = initialize_firebase()
        group_name = message.chat.title
        if await subscribe_group(root_ref, message.chat.id, group_name):
            bot.reply_to(
                message,
                f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã!\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
                reply_markup=create_group_keyboard()
            )
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in subscribe_group: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã")

async def process_unsubscribe_group(bot, message):
    try:
        if not is_group_admin(bot, message.chat, message.from_user.id):
            bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å –æ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")
            return
        
        root_ref = initialize_firebase()
        group_name = message.chat.title
        if await unsubscribe_group(root_ref, message.chat.id):
            bot.reply_to(
                message,
                f"‚ùå –ì—Ä—É–ø–ø–∞ '{group_name}' –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.\n"
                "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe_group –∏–ª–∏ –∫–Ω–æ–ø–∫—É üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É."
            )
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in unsubscribe_group: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã")

async def process_send_group_help(bot, message):
    try:
        text = (
            "ü§ñ *–ü–æ–º–æ—â—å –¥–ª—è –≥—Ä—É–ø–ø*\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üé≤ *–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç* - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç\n"
            "üîî *–ü–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É* - –ø–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã\n"
            "üîï *–û—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É* - –æ—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É –æ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤\n"
            "‚ÑπÔ∏è *–ü–æ–º–æ—â—å* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ò–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/joke - —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç\n"
            "/subscribe_group - –ø–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
            "/unsubscribe_group - –æ—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
            "/help - –ø–æ–º–æ—â—å"
        )
        bot.send_message(
            message.chat.id, 
            text, 
            parse_mode='Markdown',
            reply_markup=create_group_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in send_group_help: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–º–æ—â–∏")