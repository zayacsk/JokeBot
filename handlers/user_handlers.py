import logging
from telebot import types
import config
from keyboards import create_main_keyboard, create_cancel_keyboard, create_admin_keyboard
from states import set_user_state, get_user_state, delete_user_state
from utils import log_message, is_admin, last_joke_cache
from async_utils import run_async
from firebase import initialize_firebase, add_joke, get_user_jokes, get_random_joke, get_unapproved_count, subscribe_user, unsubscribe_user

logger = logging.getLogger(__name__)

def setup_user_handlers(bot):
    @bot.message_handler(func=lambda m: m.text == 'üé≤ –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞' and m.chat.type == 'private')
    def random_joke(message):
        log_message(logger, message)
        run_async(process_random_joke(bot, message))

    @bot.message_handler(func=lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —à—É—Ç–∫—É' and m.chat.type == 'private')
    def add_joke_start(message):
        log_message(logger, message)
        run_async(process_add_joke_start(bot, message))

    @bot.message_handler(func=lambda m: get_user_state(m.from_user.id) and 
                                        get_user_state(m.from_user.id).get('state') == 'adding_joke' and 
                                        m.chat.type == 'private')
    def add_joke_text(message):
        log_message(logger, message)
        run_async(process_add_joke_text(bot, message))

    @bot.message_handler(func=lambda m: m.text == 'üìú –ú–æ–∏ —à—É—Ç–∫–∏' and m.chat.type == 'private')
    def show_user_jokes(message):
        log_message(logger, message)
        run_async(process_show_user_jokes(bot, message))

    @bot.message_handler(func=lambda m: m.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —à—É—Ç–∫—É' and m.chat.type == 'private')
    def delete_joke_start(message):
        log_message(logger, message)
        run_async(process_delete_joke_start(bot, message))
    
    @bot.message_handler(func=lambda m: m.text == 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' and m.chat.type == 'private')
    def subscribe_random_jokes(message):
        log_message(logger, message)
        run_async(process_subscribe(bot, message))

    @bot.message_handler(func=lambda m: m.text == 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è' and m.chat.type == 'private')
    def unsubscribe_random_jokes(message):
        log_message(logger, message)
        run_async(process_unsubscribe(bot, message))

    @bot.message_handler(func=lambda m: m.text == 'üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' and 
                                        is_admin(m.from_user.id) and 
                                        m.chat.type == 'private')
    def admin_panel(message):
        log_message(logger, message)
        bot.send_message(
            message.chat.id,
            "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*",
            parse_mode='Markdown',
            reply_markup=create_admin_keyboard()
        )

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def process_random_joke(bot, message):
    try:
        chat_id = message.chat.id
        root_ref = initialize_firebase()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —à—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        last_joke_id = last_joke_cache.get(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        joke = await get_random_joke(root_ref, exclude_joke_id=last_joke_id)
        
        if not joke:
            bot.reply_to(message, "üò¢ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–π —à—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        last_joke_cache[chat_id] = joke['joke_id']
        
        bot.send_message(
            message.chat.id,
            f"üìú *–ê–Ω–µ–∫–¥–æ—Ç #{joke['joke_id']}*\n\n{joke['text']}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in random_joke: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏")

async def process_add_joke_start(bot, message):
    try:
        user_id = message.from_user.id
        set_user_state(user_id, {'state': 'adding_joke'})
        bot.send_message(
            message.chat.id,
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=create_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in add_joke_start: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—É—Ç–∫–∏")

async def process_add_joke_text(bot, message):
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            bot.send_message(
                message.chat.id, 
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                reply_markup=create_main_keyboard(user_id)
            )
            delete_user_state(user_id)
            return
        
        if len(text) < config.MIN_JOKE_LENGTH:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º {config.MIN_JOKE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç
        root_ref = initialize_firebase()
        jokes_ref = root_ref.child('jokes')
        all_jokes = jokes_ref.get() or {}
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
        normalized_text = " ".join(text.lower().split())
        
        for joke in all_jokes.values():
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            existing_text = " ".join(joke.get('text', '').lower().split())
            if existing_text == normalized_text:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –¢–∞–∫–æ–π –∞–Ω–µ–∫–¥–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!"
                )
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç —Å —Ñ–ª–∞–≥–æ–º approved=False
        joke_key = await add_joke(root_ref, text, user_id)
        if not joke_key:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return
        
        delete_user_state(user_id)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ê–Ω–µ–∫–¥–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
            reply_markup=create_main_keyboard(user_id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await notify_admins_new_joke(bot, joke_key, text)
        
    except Exception as e:
        logger.error(f"Error in add_joke_text: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—É—Ç–∫–∏")

async def notify_admins_new_joke(bot, joke_key, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∞–Ω–µ–∫–¥–æ—Ç–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        root_ref = initialize_firebase()
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        unapproved_count = await get_unapproved_count(root_ref)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"‚ö†Ô∏è *–ù–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!*\n\n"
            f"üìä –í—Å–µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {unapproved_count}\n\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in config.ADMIN_IDS:
            try:
                bot.send_message(
                    admin_id,
                    message_text,
                    parse_mode='Markdown',
                    reply_markup=types.InlineKeyboardMarkup().row(
                        types.InlineKeyboardButton(
                            "üëÆ –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                            callback_data=f"moderate:{joke_key}"
                        )
                    )
                )
            except Exception as e:
                logger.error(f"Error sending notification to admin {admin_id}: {e}")
    except Exception as e:
        logger.error(f"Error in notify_admins_new_joke: {e}")

async def process_show_user_jokes(bot, message):
    try:
        user_id = message.from_user.id
        root_ref = initialize_firebase()
        user_jokes = await get_user_jokes(root_ref, user_id, only_approved=True)
        
        if not user_jokes:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤")
            return
        
        response = "üìö *–í–∞—à–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã:*\n\n"
        for key, joke in user_jokes.items():
            preview = joke['text'][:50] + '...' if len(joke['text']) > 50 else joke['text']
            response += f"üîπ *#{joke['joke_id']}*\n{preview}\n\n"
        
        bot.send_message(
            message.chat.id,
            response,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in show_user_jokes: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —à—É—Ç–æ–∫")

async def process_delete_joke_start(bot, message):
    try:
        user_id = message.from_user.id
        root_ref = initialize_firebase()
        user_jokes = await get_user_jokes(root_ref, user_id, only_approved=True)
        
        if not user_jokes:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        keyboard = types.InlineKeyboardMarkup()
        for key, joke in user_jokes.items():
            keyboard.add(types.InlineKeyboardButton(
                text=f"‚ùå #{joke['joke_id']}", 
                callback_data=f"delete:{key}"
            ))
        
        set_user_state(user_id, {'state': 'deleting_joke', 'jokes': user_jokes})
        bot.send_message(
            message.chat.id,
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in delete_joke_start: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à—É—Ç–æ–∫")

async def process_subscribe(bot, message):
    try:
        user_id = message.from_user.id
        root_ref = initialize_firebase()
        
        if await subscribe_user(root_ref, user_id):
            bot.reply_to(
                message,
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã!\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è.",
                reply_markup=create_main_keyboard(user_id)
            )
        else:
            bot.reply_to(
                message,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard(user_id)
            )
    except Exception as e:
        logger.error(f"Error in subscribe: {e}")
        bot.reply_to(
            message,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.",
            reply_markup=create_main_keyboard(user_id)
        )

async def process_unsubscribe(bot, message):
    try:
        user_id = message.from_user.id
        root_ref = initialize_firebase()
        
        if await unsubscribe_user(root_ref, user_id):
            bot.reply_to(
                message,
                "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.\n"
                "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.",
                reply_markup=create_main_keyboard(user_id)
            )
        else:
            bot.reply_to(
                message,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard(user_id)
            )
    except Exception as e:
        logger.error(f"Error in unsubscribe: {e}")
        bot.reply_to(
            message,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.",
            reply_markup=create_main_keyboard(user_id)
        )