import asyncio
import random
import logging
import time
from concurrent.futures import ThreadPoolExecutor

import requests
from firebase import initialize_firebase, get_random_joke, get_subscribers, get_subscribed_groups
import config
from utils import last_joke_cache

logger = logging.getLogger(__name__)

class JokeScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.running = False
        self.root_ref = initialize_firebase()
        self.loop = None
        self.thread_pool = ThreadPoolExecutor(max_workers=10)

    def start(self, loop):
        if self.running:
            return
            
        self.running = True
        self.loop = loop
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø
        asyncio.run_coroutine_threadsafe(self._user_joke_loop(), loop)
        asyncio.run_coroutine_threadsafe(self._group_joke_loop(), loop)
        logger.info("Random joke scheduler started")

    def stop(self):
        self.running = False
        self.thread_pool.shutdown(wait=False)
        logger.info("Random joke scheduler stopped")

    async def _user_joke_loop(self):
        """–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ü–∏–∫–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à—É—Ç–æ–∫ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        while self.running:
            try:
                user_interval = config.JOKE_INTERVAL
                logger.info(f"Next user jokes batch in {user_interval} seconds")
                await asyncio.sleep(user_interval)
                if not self.running:
                    break
                await self._send_jokes_to_all_users()
            except Exception as e:
                logger.error(f"User joke loop error: {e}")
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _group_joke_loop(self):
        """–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ü–∏–∫–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à—É—Ç–æ–∫ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º"""
        while self.running:
            try:
                group_interval = config.GROUP_JOKE_INTERVAL
                logger.info(f"Next group jokes batch in {group_interval} seconds")
                await asyncio.sleep(group_interval)
                if not self.running:
                    break
                await self._send_jokes_to_all_groups()
            except Exception as e:
                logger.error(f"Group joke loop error: {e}")
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _send_jokes_to_all_users(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —à—É—Ç–æ–∫ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            subscribers = await get_subscribers(self.root_ref)
            if not subscribers:
                logger.info("No subscribers for random jokes")
                return
                
            logger.info(f"Sending jokes to {len(subscribers)} users")
            
            for user_id in subscribers:
                try:
                    chat_id = user_id
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —à—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    last_joke_id = last_joke_cache.get(chat_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ —Ç–æ–ª—å–∫–æ approved
                    joke = await get_random_joke(
                        self.root_ref, 
                        exclude_joke_id=last_joke_id
                    )
                    if not joke:
                        logger.warning("No jokes available for sending")
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    last_joke_cache[chat_id] = joke['joke_id']
                    
                    self.thread_pool.submit(
                        self._sync_send_message,
                        user_id,
                        f"üé≤ *–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –¥–Ω—è!*\n\n"
                        f"üìú –ê–Ω–µ–∫–¥–æ—Ç #{joke['joke_id']}\n\n"
                        f"{joke['text']}"
                    )
                except Exception as e:
                    logger.error(f"Error sending joke to user {user_id}: {e}")
        except Exception as e:
            logger.error(f"Error in sending jokes to users: {e}")

    async def _send_jokes_to_all_groups(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —à—É—Ç–æ–∫ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"""
        try:
            groups = await get_subscribed_groups(self.root_ref)
            if not groups:
                logger.info("No groups subscribed for random jokes")
                return
                
            current_time = time.time()
            logger.info(f"Sending jokes to {len(groups)} groups")
            
            for group_id, group_data in groups.items():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Ä–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É
                    last_joke_time = group_data.get('last_joke_time', 0)
                    if current_time - last_joke_time < config.GROUP_JOKE_INTERVAL:
                        logger.debug(f"Skipping group {group_id} - too soon")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —à—É—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                    last_joke_id = last_joke_cache.get(group_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ —Ç–æ–ª—å–∫–æ approved
                    joke = await get_random_joke(
                        self.root_ref, 
                        exclude_joke_id=last_joke_id
                    )
                    if not joke:
                        logger.warning("No jokes available for sending")
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                    last_joke_cache[group_id] = joke['joke_id']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à—É—Ç–∫—É
                    self.thread_pool.submit(
                        self._send_to_group_and_update_time,
                        group_id,
                        joke,
                        current_time
                    )
                except Exception as e:
                    logger.error(f"Error sending joke to group {group_id}: {e}")
        except Exception as e:
            logger.error(f"Error in sending jokes to groups: {e}")

    def _send_to_group_and_update_time(self, group_id, joke, current_time):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à—É—Ç–∫—É –≤ –≥—Ä—É–ø–ø—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        text = f"üé≤ *–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç!*\n\n" \
               f"üìú –ê–Ω–µ–∫–¥–æ—Ç #{joke['joke_id']}\n\n" \
               f"{joke['text']}"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self._sync_send_message(group_id, text):
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            try:
                groups_ref = self.root_ref.child(config.GROUP_DB_PATH)
                groups_ref.child(str(group_id)).update({'last_joke_time': current_time})
            except Exception as e:
                logger.error(f"Error updating last joke time for group {group_id}: {e}")

    def _sync_send_message(self, chat_id, text, max_retries=3, retry_delay=2):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        attempt = 0
        while attempt < max_retries:
            try:
                self.bot.send_message(
                    chat_id,
                    text,
                    parse_mode='Markdown'
                )
                logger.debug(f"Message sent to {chat_id}")
                return True
            except requests.exceptions.ReadTimeout:
                logger.warning(f"Read timeout for {chat_id}, retrying...")
                attempt += 1
                time.sleep(retry_delay)
            except requests.exceptions.ConnectionError:
                logger.warning(f"Connection error for {chat_id}, retrying...")
                attempt += 1
                time.sleep(retry_delay)
            except Exception as e:
                logger.error(f"Error sending to {chat_id} (attempt {attempt}/{max_retries}): {e}")
                attempt += 1
                if attempt < max_retries:
                    time.sleep(retry_delay)
                    
        logger.error(f"Failed to send message to {chat_id} after {max_retries} attempts")
        return False